define(['dart_sdk', 'packages/flutter/src/foundation/object.dart', 'packages/flutter/src/physics/tolerance.dart', 'packages/flutter/src/physics/utils.dart', 'packages/flutter/src/physics/simulation.dart'], (function load__packages__flutter__src__physics__spring_simulation_dart(dart_sdk, packages__flutter__src__foundation__object$46dart, packages__flutter__src__physics__tolerance$46dart, packages__flutter__src__physics__utils$46dart, packages__flutter__src__physics__simulation$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const object = packages__flutter__src__foundation__object$46dart.src__foundation__object;
  const tolerance = packages__flutter__src__physics__tolerance$46dart.src__physics__tolerance;
  const utils = packages__flutter__src__physics__utils$46dart.src__physics__utils;
  const simulation = packages__flutter__src__physics__simulation$46dart.src__physics__simulation;
  var spring_simulation = Object.create(dart.library);
  var $toStringAsFixed = dartx.toStringAsFixed;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: spring_simulation.SpringType.prototype,
        [_name$]: "SpringType.criticallyDamped",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: spring_simulation.SpringType.prototype,
        [_name$]: "SpringType.underDamped",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: spring_simulation.SpringType.prototype,
        [_name$]: "SpringType.overDamped",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], spring_simulation.SpringType);
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: tolerance.Tolerance.prototype,
        [Tolerance_velocity]: 0.001,
        [Tolerance_time]: 0.001,
        [Tolerance_distance]: 0.001
      });
    }
  }, false);
  var C = Array(5).fill(void 0);
  var I = [
    "package:flutter/src/physics/spring_simulation.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/physics/spring_simulation.dart"
  ];
  var mass$ = dart.privateName(spring_simulation, "SpringDescription.mass");
  var stiffness$ = dart.privateName(spring_simulation, "SpringDescription.stiffness");
  var damping$ = dart.privateName(spring_simulation, "SpringDescription.damping");
  spring_simulation.SpringDescription = class SpringDescription extends core.Object {
    get mass() {
      return this[mass$];
    }
    set mass(value) {
      super.mass = value;
    }
    get stiffness() {
      return this[stiffness$];
    }
    set stiffness(value) {
      super.stiffness = value;
    }
    get damping() {
      return this[damping$];
    }
    set damping(value) {
      super.damping = value;
    }
    toString() {
      return object.objectRuntimeType(this, "SpringDescription") + "(mass: " + this.mass[$toStringAsFixed](1) + ", stiffness: " + this.stiffness[$toStringAsFixed](1) + ", damping: " + this.damping[$toStringAsFixed](1) + ")";
    }
  };
  (spring_simulation.SpringDescription.new = function(opts) {
    let mass = opts && 'mass' in opts ? opts.mass : null;
    let stiffness = opts && 'stiffness' in opts ? opts.stiffness : null;
    let damping = opts && 'damping' in opts ? opts.damping : null;
    this[mass$] = mass;
    this[stiffness$] = stiffness;
    this[damping$] = damping;
    ;
  }).prototype = spring_simulation.SpringDescription.prototype;
  (spring_simulation.SpringDescription.withDampingRatio = function(opts) {
    let mass = opts && 'mass' in opts ? opts.mass : null;
    let stiffness = opts && 'stiffness' in opts ? opts.stiffness : null;
    let ratio = opts && 'ratio' in opts ? opts.ratio : 1;
    this[mass$] = mass;
    this[stiffness$] = stiffness;
    this[damping$] = ratio * 2.0 * math.sqrt(mass * stiffness);
    ;
  }).prototype = spring_simulation.SpringDescription.prototype;
  dart.addTypeTests(spring_simulation.SpringDescription);
  dart.addTypeCaches(spring_simulation.SpringDescription);
  dart.setLibraryUri(spring_simulation.SpringDescription, I[0]);
  dart.setFieldSignature(spring_simulation.SpringDescription, () => ({
    __proto__: dart.getFields(spring_simulation.SpringDescription.__proto__),
    mass: dart.finalFieldType(core.double),
    stiffness: dart.finalFieldType(core.double),
    damping: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(spring_simulation.SpringDescription, ['toString']);
  var _name$ = dart.privateName(spring_simulation, "_name");
  spring_simulation.SpringType = class SpringType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (spring_simulation.SpringType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = spring_simulation.SpringType.prototype;
  dart.addTypeTests(spring_simulation.SpringType);
  dart.addTypeCaches(spring_simulation.SpringType);
  dart.setLibraryUri(spring_simulation.SpringType, I[0]);
  dart.setFieldSignature(spring_simulation.SpringType, () => ({
    __proto__: dart.getFields(spring_simulation.SpringType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(spring_simulation.SpringType, ['toString']);
  spring_simulation.SpringType.criticallyDamped = C[0] || CT.C0;
  spring_simulation.SpringType.underDamped = C[1] || CT.C1;
  spring_simulation.SpringType.overDamped = C[2] || CT.C2;
  spring_simulation.SpringType.values = C[3] || CT.C3;
  var Tolerance_velocity = dart.privateName(tolerance, "Tolerance.velocity");
  var Tolerance_time = dart.privateName(tolerance, "Tolerance.time");
  var Tolerance_distance = dart.privateName(tolerance, "Tolerance.distance");
  var _endPosition = dart.privateName(spring_simulation, "_endPosition");
  var _solution = dart.privateName(spring_simulation, "_solution");
  spring_simulation.SpringSimulation = class SpringSimulation extends simulation.Simulation {
    get type() {
      return this[_solution].type;
    }
    x(time) {
      return this[_endPosition] + this[_solution].x(time);
    }
    dx(time) {
      return this[_solution].dx(time);
    }
    isDone(time) {
      return utils.nearZero(this[_solution].x(time), this.tolerance.distance) && utils.nearZero(this[_solution].dx(time), this.tolerance.velocity);
    }
    toString() {
      return object.objectRuntimeType(this, "SpringSimulation") + "(end: " + dart.str(this[_endPosition]) + ", " + dart.str(this.type) + ")";
    }
  };
  (spring_simulation.SpringSimulation.new = function(spring, start, end, velocity, opts) {
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[4] || CT.C4;
    this[_endPosition] = end;
    this[_solution] = spring_simulation._SpringSolution.new(spring, start - end, velocity);
    spring_simulation.SpringSimulation.__proto__.new.call(this, {tolerance: tolerance});
    ;
  }).prototype = spring_simulation.SpringSimulation.prototype;
  dart.addTypeTests(spring_simulation.SpringSimulation);
  dart.addTypeCaches(spring_simulation.SpringSimulation);
  dart.setMethodSignature(spring_simulation.SpringSimulation, () => ({
    __proto__: dart.getMethods(spring_simulation.SpringSimulation.__proto__),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double]),
    isDone: dart.fnType(core.bool, [core.double])
  }));
  dart.setGetterSignature(spring_simulation.SpringSimulation, () => ({
    __proto__: dart.getGetters(spring_simulation.SpringSimulation.__proto__),
    type: spring_simulation.SpringType
  }));
  dart.setLibraryUri(spring_simulation.SpringSimulation, I[0]);
  dart.setFieldSignature(spring_simulation.SpringSimulation, () => ({
    __proto__: dart.getFields(spring_simulation.SpringSimulation.__proto__),
    [_endPosition]: dart.finalFieldType(core.double),
    [_solution]: dart.finalFieldType(spring_simulation._SpringSolution)
  }));
  dart.defineExtensionMethods(spring_simulation.SpringSimulation, ['toString']);
  spring_simulation.ScrollSpringSimulation = class ScrollSpringSimulation extends spring_simulation.SpringSimulation {
    x(time) {
      return this.isDone(time) ? this[_endPosition] : super.x(time);
    }
  };
  (spring_simulation.ScrollSpringSimulation.new = function(spring, start, end, velocity, opts) {
    let tolerance = opts && 'tolerance' in opts ? opts.tolerance : C[4] || CT.C4;
    spring_simulation.ScrollSpringSimulation.__proto__.new.call(this, spring, start, end, velocity, {tolerance: tolerance});
    ;
  }).prototype = spring_simulation.ScrollSpringSimulation.prototype;
  dart.addTypeTests(spring_simulation.ScrollSpringSimulation);
  dart.addTypeCaches(spring_simulation.ScrollSpringSimulation);
  dart.setLibraryUri(spring_simulation.ScrollSpringSimulation, I[0]);
  spring_simulation._SpringSolution = class _SpringSolution extends core.Object {
    static new(spring, initialPosition, initialVelocity) {
      if (!(spring !== null)) dart.assertFailed(null, I[1], 156, 12, "spring != null");
      if (!(spring.mass !== null)) dart.assertFailed(null, I[1], 157, 12, "spring.mass != null");
      if (!(spring.stiffness !== null)) dart.assertFailed(null, I[1], 158, 12, "spring.stiffness != null");
      if (!(spring.damping !== null)) dart.assertFailed(null, I[1], 159, 12, "spring.damping != null");
      if (!(initialPosition !== null)) dart.assertFailed(null, I[1], 160, 12, "initialPosition != null");
      if (!(initialVelocity !== null)) dart.assertFailed(null, I[1], 161, 12, "initialVelocity != null");
      let cmk = spring.damping * spring.damping - 4 * spring.mass * spring.stiffness;
      if (cmk === 0.0) return spring_simulation._CriticalSolution.new(spring, initialPosition, initialVelocity);
      if (cmk > 0.0) return spring_simulation._OverdampedSolution.new(spring, initialPosition, initialVelocity);
      return spring_simulation._UnderdampedSolution.new(spring, initialPosition, initialVelocity);
    }
  };
  (spring_simulation._SpringSolution[dart.mixinNew] = function() {
  }).prototype = spring_simulation._SpringSolution.prototype;
  dart.addTypeTests(spring_simulation._SpringSolution);
  dart.addTypeCaches(spring_simulation._SpringSolution);
  dart.setLibraryUri(spring_simulation._SpringSolution, I[0]);
  var _r = dart.privateName(spring_simulation, "_r");
  var _c1 = dart.privateName(spring_simulation, "_c1");
  var _c2 = dart.privateName(spring_simulation, "_c2");
  spring_simulation._CriticalSolution = class _CriticalSolution extends core.Object {
    static new(spring, distance, velocity) {
      let r = -spring.damping / (2.0 * spring.mass);
      let c1 = distance;
      let c2 = velocity / (r * distance);
      return new spring_simulation._CriticalSolution.withArgs(r, c1, c2);
    }
    x(time) {
      return (this[_c1] + this[_c2] * time) * math.pow(2.718281828459045, this[_r] * time);
    }
    dx(time) {
      let power = math.pow(2.718281828459045, this[_r] * time);
      return this[_r] * (this[_c1] + this[_c2] * time) * power + this[_c2] * power;
    }
    get type() {
      return spring_simulation.SpringType.criticallyDamped;
    }
  };
  (spring_simulation._CriticalSolution.withArgs = function(r, c1, c2) {
    this[_r] = r;
    this[_c1] = c1;
    this[_c2] = c2;
    ;
  }).prototype = spring_simulation._CriticalSolution.prototype;
  dart.addTypeTests(spring_simulation._CriticalSolution);
  dart.addTypeCaches(spring_simulation._CriticalSolution);
  spring_simulation._CriticalSolution[dart.implements] = () => [spring_simulation._SpringSolution];
  dart.setMethodSignature(spring_simulation._CriticalSolution, () => ({
    __proto__: dart.getMethods(spring_simulation._CriticalSolution.__proto__),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double])
  }));
  dart.setGetterSignature(spring_simulation._CriticalSolution, () => ({
    __proto__: dart.getGetters(spring_simulation._CriticalSolution.__proto__),
    type: spring_simulation.SpringType
  }));
  dart.setLibraryUri(spring_simulation._CriticalSolution, I[0]);
  dart.setFieldSignature(spring_simulation._CriticalSolution, () => ({
    __proto__: dart.getFields(spring_simulation._CriticalSolution.__proto__),
    [_r]: dart.finalFieldType(core.double),
    [_c1]: dart.finalFieldType(core.double),
    [_c2]: dart.finalFieldType(core.double)
  }));
  var _r1 = dart.privateName(spring_simulation, "_r1");
  var _r2 = dart.privateName(spring_simulation, "_r2");
  spring_simulation._OverdampedSolution = class _OverdampedSolution extends core.Object {
    static new(spring, distance, velocity) {
      let cmk = spring.damping * spring.damping - 4 * spring.mass * spring.stiffness;
      let r1 = (-spring.damping - math.sqrt(cmk)) / (2.0 * spring.mass);
      let r2 = (-spring.damping + math.sqrt(cmk)) / (2.0 * spring.mass);
      let c2 = (velocity - r1 * distance) / (r2 - r1);
      let c1 = distance - c2;
      return new spring_simulation._OverdampedSolution.withArgs(r1, r2, c1, c2);
    }
    x(time) {
      return this[_c1] * math.pow(2.718281828459045, this[_r1] * time) + this[_c2] * math.pow(2.718281828459045, this[_r2] * time);
    }
    dx(time) {
      return this[_c1] * this[_r1] * math.pow(2.718281828459045, this[_r1] * time) + this[_c2] * this[_r2] * math.pow(2.718281828459045, this[_r2] * time);
    }
    get type() {
      return spring_simulation.SpringType.overDamped;
    }
  };
  (spring_simulation._OverdampedSolution.withArgs = function(r1, r2, c1, c2) {
    this[_r1] = r1;
    this[_r2] = r2;
    this[_c1] = c1;
    this[_c2] = c2;
    ;
  }).prototype = spring_simulation._OverdampedSolution.prototype;
  dart.addTypeTests(spring_simulation._OverdampedSolution);
  dart.addTypeCaches(spring_simulation._OverdampedSolution);
  spring_simulation._OverdampedSolution[dart.implements] = () => [spring_simulation._SpringSolution];
  dart.setMethodSignature(spring_simulation._OverdampedSolution, () => ({
    __proto__: dart.getMethods(spring_simulation._OverdampedSolution.__proto__),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double])
  }));
  dart.setGetterSignature(spring_simulation._OverdampedSolution, () => ({
    __proto__: dart.getGetters(spring_simulation._OverdampedSolution.__proto__),
    type: spring_simulation.SpringType
  }));
  dart.setLibraryUri(spring_simulation._OverdampedSolution, I[0]);
  dart.setFieldSignature(spring_simulation._OverdampedSolution, () => ({
    __proto__: dart.getFields(spring_simulation._OverdampedSolution.__proto__),
    [_r1]: dart.finalFieldType(core.double),
    [_r2]: dart.finalFieldType(core.double),
    [_c1]: dart.finalFieldType(core.double),
    [_c2]: dart.finalFieldType(core.double)
  }));
  var _w = dart.privateName(spring_simulation, "_w");
  spring_simulation._UnderdampedSolution = class _UnderdampedSolution extends core.Object {
    static new(spring, distance, velocity) {
      let w = math.sqrt(4.0 * spring.mass * spring.stiffness - spring.damping * spring.damping) / (2.0 * spring.mass);
      let r = -(spring.damping / 2.0 * spring.mass);
      let c1 = distance;
      let c2 = (velocity - r * distance) / w;
      return new spring_simulation._UnderdampedSolution.withArgs(w, r, c1, c2);
    }
    x(time) {
      return math.pow(2.718281828459045, this[_r] * time) * (this[_c1] * math.cos(this[_w] * time) + this[_c2] * math.sin(this[_w] * time));
    }
    dx(time) {
      let power = math.pow(2.718281828459045, this[_r] * time);
      let cosine = math.cos(this[_w] * time);
      let sine = math.sin(this[_w] * time);
      return power * (this[_c2] * this[_w] * cosine - this[_c1] * this[_w] * sine) + this[_r] * power * (this[_c2] * sine + this[_c1] * cosine);
    }
    get type() {
      return spring_simulation.SpringType.underDamped;
    }
  };
  (spring_simulation._UnderdampedSolution.withArgs = function(w, r, c1, c2) {
    this[_w] = w;
    this[_r] = r;
    this[_c1] = c1;
    this[_c2] = c2;
    ;
  }).prototype = spring_simulation._UnderdampedSolution.prototype;
  dart.addTypeTests(spring_simulation._UnderdampedSolution);
  dart.addTypeCaches(spring_simulation._UnderdampedSolution);
  spring_simulation._UnderdampedSolution[dart.implements] = () => [spring_simulation._SpringSolution];
  dart.setMethodSignature(spring_simulation._UnderdampedSolution, () => ({
    __proto__: dart.getMethods(spring_simulation._UnderdampedSolution.__proto__),
    x: dart.fnType(core.double, [core.double]),
    dx: dart.fnType(core.double, [core.double])
  }));
  dart.setGetterSignature(spring_simulation._UnderdampedSolution, () => ({
    __proto__: dart.getGetters(spring_simulation._UnderdampedSolution.__proto__),
    type: spring_simulation.SpringType
  }));
  dart.setLibraryUri(spring_simulation._UnderdampedSolution, I[0]);
  dart.setFieldSignature(spring_simulation._UnderdampedSolution, () => ({
    __proto__: dart.getFields(spring_simulation._UnderdampedSolution.__proto__),
    [_w]: dart.finalFieldType(core.double),
    [_r]: dart.finalFieldType(core.double),
    [_c1]: dart.finalFieldType(core.double),
    [_c2]: dart.finalFieldType(core.double)
  }));
  dart.trackLibraries("packages/flutter/src/physics/spring_simulation.dart", {
    "package:flutter/src/physics/spring_simulation.dart": spring_simulation
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["spring_simulation.dart"],"names":[],"mappings":"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","file":"../../../../../../../packages/flutter/src/physics/spring_simulation.dart.lib.js"}');
  // Exports:
  return {
    src__physics__spring_simulation: spring_simulation
  };
}));

//# sourceMappingURL=spring_simulation.dart.lib.js.map
