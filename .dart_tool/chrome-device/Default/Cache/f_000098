define(['dart_sdk', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/foundation/synchronous_future.dart'], (function load__packages__flutter__src__cupertino__debug_dart(dart_sdk, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__foundation__synchronous_future$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const ui = dart_sdk.ui;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const localizations = packages__flutter__src__widgets__widget_span$46dart.src__widgets__localizations;
  const assertions = packages__flutter__src__foundation__debug$46dart.src__foundation__assertions;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const synchronous_future = packages__flutter__src__foundation__synchronous_future$46dart.src__foundation__synchronous_future;
  var debug = Object.create(dart.library);
  var localizations$ = Object.create(dart.library);
  var $runtimeType = dartx.runtimeType;
  var $addAll = dartx.addAll;
  var $toString = dartx.toString;
  var $_get = dartx._get;
  var $padLeft = dartx.padLeft;
  var $padRight = dartx.padRight;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    SynchronousFutureOfCupertinoLocalizations: () => (T.SynchronousFutureOfCupertinoLocalizations = dart.constFn(synchronous_future.SynchronousFuture$(localizations$.CupertinoLocalizations)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: localizations$.DatePickerDateTimeOrder.prototype,
        [_name$]: "DatePickerDateTimeOrder.date_time_dayPeriod",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: localizations$.DatePickerDateTimeOrder.prototype,
        [_name$]: "DatePickerDateTimeOrder.date_dayPeriod_time",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: localizations$.DatePickerDateTimeOrder.prototype,
        [_name$]: "DatePickerDateTimeOrder.time_dayPeriod_date",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: localizations$.DatePickerDateTimeOrder.prototype,
        [_name$]: "DatePickerDateTimeOrder.dayPeriod_time_date",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3], localizations$.DatePickerDateTimeOrder);
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: localizations$.DatePickerDateOrder.prototype,
        [_name$]: "DatePickerDateOrder.dmy",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: localizations$.DatePickerDateOrder.prototype,
        [_name$]: "DatePickerDateOrder.mdy",
        index: 1
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: localizations$.DatePickerDateOrder.prototype,
        [_name$]: "DatePickerDateOrder.ymd",
        index: 2
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: localizations$.DatePickerDateOrder.prototype,
        [_name$]: "DatePickerDateOrder.ydm",
        index: 3
      });
    },
    get C9() {
      return C[9] = dart.constList([C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8], localizations$.DatePickerDateOrder);
    },
    get C10() {
      return C[10] = dart.constList(["hour", "hours"], core.String);
    },
    get C11() {
      return C[11] = dart.constList(["min."], core.String);
    },
    get C12() {
      return C[12] = dart.constList(["sec."], core.String);
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: localizations$.DefaultCupertinoLocalizations.prototype
      });
    },
    get C14() {
      return C[14] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], core.String);
    },
    get C15() {
      return C[15] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], core.String);
    },
    get C16() {
      return C[16] = dart.constList(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], core.String);
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: localizations$._CupertinoLocalizationsDelegate.prototype
      });
    }
  }, false);
  var C = Array(18).fill(void 0);
  var I = [
    "file:///C:/src/flutter/packages/flutter/lib/src/cupertino/debug.dart",
    "package:flutter/src/cupertino/localizations.dart",
    "file:///C:/src/flutter/packages/flutter/lib/src/cupertino/localizations.dart"
  ];
  debug.debugCheckHasCupertinoLocalizations = function debugCheckHasCupertinoLocalizations(context) {
    if (!dart.fn(() => {
      if (localizations.Localizations.of(localizations$.CupertinoLocalizations, context, dart.wrapType(localizations$.CupertinoLocalizations)) == null) {
        dart.throw(new assertions.FlutterError.fromParts((() => {
          let t0 = T.JSArrayOfDiagnosticsNode().of([new assertions.ErrorSummary.new("No CupertinoLocalizations found."), new assertions.ErrorDescription.new(dart.str(context.widget[$runtimeType]) + " widgets require CupertinoLocalizations " + "to be provided by a Localizations widget ancestor."), new assertions.ErrorDescription.new("The cupertino library uses Localizations to generate messages, " + "labels, and abbreviations."), new assertions.ErrorHint.new("To introduce a CupertinoLocalizations, either use a " + "CupertinoApp at the root of your application to include them " + "automatically, or add a Localization widget with a " + "CupertinoLocalizations delegate.")]);
          t0[$addAll](context.describeMissingAncestor({expectedAncestorType: dart.wrapType(localizations$.CupertinoLocalizations)}));
          return t0;
        })()));
      }
      return true;
    }, T.VoidTobool())()) dart.assertFailed(null, I[0], 21, 10, "() {\r\n    if (Localizations.of<CupertinoLocalizations>(context, CupertinoLocalizations) == null) {\r\n      throw FlutterError.fromParts(<DiagnosticsNode>[\r\n        ErrorSummary('No CupertinoLocalizations found.'),\r\n        ErrorDescription(\r\n          '${context.widget.runtimeType} widgets require CupertinoLocalizations '\r\n          'to be provided by a Localizations widget ancestor.',\r\n        ),\r\n        ErrorDescription(\r\n          'The cupertino library uses Localizations to generate messages, '\r\n          'labels, and abbreviations.',\r\n        ),\r\n        ErrorHint(\r\n          'To introduce a CupertinoLocalizations, either use a '\r\n          'CupertinoApp at the root of your application to include them '\r\n          'automatically, or add a Localization widget with a '\r\n          'CupertinoLocalizations delegate.',\r\n        ),\r\n        ...context.describeMissingAncestor(expectedAncestorType: CupertinoLocalizations),\r\n      ]);\r\n    }\r\n    return true;\r\n  }()");
    return true;
  };
  var _name$ = dart.privateName(localizations$, "_name");
  localizations$.DatePickerDateTimeOrder = class DatePickerDateTimeOrder extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (localizations$.DatePickerDateTimeOrder.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = localizations$.DatePickerDateTimeOrder.prototype;
  dart.addTypeTests(localizations$.DatePickerDateTimeOrder);
  dart.addTypeCaches(localizations$.DatePickerDateTimeOrder);
  dart.setLibraryUri(localizations$.DatePickerDateTimeOrder, I[1]);
  dart.setFieldSignature(localizations$.DatePickerDateTimeOrder, () => ({
    __proto__: dart.getFields(localizations$.DatePickerDateTimeOrder.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(localizations$.DatePickerDateTimeOrder, ['toString']);
  localizations$.DatePickerDateTimeOrder.date_time_dayPeriod = C[0] || CT.C0;
  localizations$.DatePickerDateTimeOrder.date_dayPeriod_time = C[1] || CT.C1;
  localizations$.DatePickerDateTimeOrder.time_dayPeriod_date = C[2] || CT.C2;
  localizations$.DatePickerDateTimeOrder.dayPeriod_time_date = C[3] || CT.C3;
  localizations$.DatePickerDateTimeOrder.values = C[4] || CT.C4;
  localizations$.DatePickerDateOrder = class DatePickerDateOrder extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (localizations$.DatePickerDateOrder.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = localizations$.DatePickerDateOrder.prototype;
  dart.addTypeTests(localizations$.DatePickerDateOrder);
  dart.addTypeCaches(localizations$.DatePickerDateOrder);
  dart.setLibraryUri(localizations$.DatePickerDateOrder, I[1]);
  dart.setFieldSignature(localizations$.DatePickerDateOrder, () => ({
    __proto__: dart.getFields(localizations$.DatePickerDateOrder.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(localizations$.DatePickerDateOrder, ['toString']);
  localizations$.DatePickerDateOrder.dmy = C[5] || CT.C5;
  localizations$.DatePickerDateOrder.mdy = C[6] || CT.C6;
  localizations$.DatePickerDateOrder.ymd = C[7] || CT.C7;
  localizations$.DatePickerDateOrder.ydm = C[8] || CT.C8;
  localizations$.DatePickerDateOrder.values = C[9] || CT.C9;
  localizations$.CupertinoLocalizations = class CupertinoLocalizations extends core.Object {
    static of(context) {
      if (!debug.debugCheckHasCupertinoLocalizations(context)) dart.assertFailed(null, I[2], 262, 12, "debugCheckHasCupertinoLocalizations(context)");
      return dart.nullCheck(localizations.Localizations.of(localizations$.CupertinoLocalizations, context, dart.wrapType(localizations$.CupertinoLocalizations)));
    }
  };
  (localizations$.CupertinoLocalizations.new = function() {
    ;
  }).prototype = localizations$.CupertinoLocalizations.prototype;
  dart.addTypeTests(localizations$.CupertinoLocalizations);
  dart.addTypeCaches(localizations$.CupertinoLocalizations);
  dart.setLibraryUri(localizations$.CupertinoLocalizations, I[1]);
  localizations$._CupertinoLocalizationsDelegate = class _CupertinoLocalizationsDelegate extends localizations.LocalizationsDelegate$(localizations$.CupertinoLocalizations) {
    isSupported(locale) {
      return locale.languageCode === "en";
    }
    load(locale) {
      return localizations$.DefaultCupertinoLocalizations.load(locale);
    }
    shouldReload(old) {
      localizations$._CupertinoLocalizationsDelegate.as(old);
      return false;
    }
    toString() {
      return "DefaultCupertinoLocalizations.delegate(en_US)";
    }
  };
  (localizations$._CupertinoLocalizationsDelegate.new = function() {
    localizations$._CupertinoLocalizationsDelegate.__proto__.new.call(this);
    ;
  }).prototype = localizations$._CupertinoLocalizationsDelegate.prototype;
  dart.addTypeTests(localizations$._CupertinoLocalizationsDelegate);
  dart.addTypeCaches(localizations$._CupertinoLocalizationsDelegate);
  dart.setMethodSignature(localizations$._CupertinoLocalizationsDelegate, () => ({
    __proto__: dart.getMethods(localizations$._CupertinoLocalizationsDelegate.__proto__),
    isSupported: dart.fnType(core.bool, [ui.Locale]),
    load: dart.fnType(async.Future$(localizations$.CupertinoLocalizations), [ui.Locale]),
    shouldReload: dart.fnType(core.bool, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(localizations$._CupertinoLocalizationsDelegate, I[1]);
  dart.defineExtensionMethods(localizations$._CupertinoLocalizationsDelegate, ['toString']);
  localizations$.DefaultCupertinoLocalizations = class DefaultCupertinoLocalizations extends core.Object {
    datePickerYear(yearIndex) {
      return yearIndex[$toString]();
    }
    datePickerMonth(monthIndex) {
      return localizations$.DefaultCupertinoLocalizations._months[$_get](monthIndex - 1);
    }
    datePickerDayOfMonth(dayIndex) {
      return dayIndex[$toString]();
    }
    datePickerHour(hour) {
      return hour[$toString]();
    }
    datePickerHourSemanticsLabel(hour) {
      return hour[$toString]() + " o'clock";
    }
    datePickerMinute(minute) {
      return minute[$toString]()[$padLeft](2, "0");
    }
    datePickerMinuteSemanticsLabel(minute) {
      if (minute === 1) return "1 minute";
      return minute[$toString]() + " minutes";
    }
    datePickerMediumDate(date) {
      return localizations$.DefaultCupertinoLocalizations._shortWeekdays[$_get](date.weekday - 1) + " " + localizations$.DefaultCupertinoLocalizations._shortMonths[$_get](date.month - 1) + " " + date.day[$toString]()[$padRight](2);
    }
    get datePickerDateOrder() {
      return localizations$.DatePickerDateOrder.mdy;
    }
    get datePickerDateTimeOrder() {
      return localizations$.DatePickerDateTimeOrder.date_time_dayPeriod;
    }
    get anteMeridiemAbbreviation() {
      return "AM";
    }
    get postMeridiemAbbreviation() {
      return "PM";
    }
    get todayLabel() {
      return "Today";
    }
    get alertDialogLabel() {
      return "Alert";
    }
    tabSemanticsLabel(opts) {
      let tabIndex = opts && 'tabIndex' in opts ? opts.tabIndex : null;
      let tabCount = opts && 'tabCount' in opts ? opts.tabCount : null;
      if (!(tabIndex >= 1)) dart.assertFailed(null, I[2], 386, 12, "tabIndex >= 1");
      if (!(tabCount >= 1)) dart.assertFailed(null, I[2], 387, 12, "tabCount >= 1");
      return "Tab " + dart.str(tabIndex) + " of " + dart.str(tabCount);
    }
    timerPickerHour(hour) {
      return hour[$toString]();
    }
    timerPickerMinute(minute) {
      return minute[$toString]();
    }
    timerPickerSecond(second) {
      return second[$toString]();
    }
    timerPickerHourLabel(hour) {
      return hour === 1 ? "hour" : "hours";
    }
    get timerPickerHourLabels() {
      return C[10] || CT.C10;
    }
    timerPickerMinuteLabel(minute) {
      return "min.";
    }
    get timerPickerMinuteLabels() {
      return C[11] || CT.C11;
    }
    timerPickerSecondLabel(second) {
      return "sec.";
    }
    get timerPickerSecondLabels() {
      return C[12] || CT.C12;
    }
    get cutButtonLabel() {
      return "Cut";
    }
    get copyButtonLabel() {
      return "Copy";
    }
    get pasteButtonLabel() {
      return "Paste";
    }
    get selectAllButtonLabel() {
      return "Select All";
    }
    get searchTextFieldPlaceholderLabel() {
      return "Search";
    }
    get modalBarrierDismissLabel() {
      return "Dismiss";
    }
    static load(locale) {
      return new (T.SynchronousFutureOfCupertinoLocalizations()).new(C[13] || CT.C13);
    }
  };
  (localizations$.DefaultCupertinoLocalizations.new = function() {
    ;
  }).prototype = localizations$.DefaultCupertinoLocalizations.prototype;
  dart.addTypeTests(localizations$.DefaultCupertinoLocalizations);
  dart.addTypeCaches(localizations$.DefaultCupertinoLocalizations);
  localizations$.DefaultCupertinoLocalizations[dart.implements] = () => [localizations$.CupertinoLocalizations];
  dart.setMethodSignature(localizations$.DefaultCupertinoLocalizations, () => ({
    __proto__: dart.getMethods(localizations$.DefaultCupertinoLocalizations.__proto__),
    datePickerYear: dart.fnType(core.String, [core.int]),
    datePickerMonth: dart.fnType(core.String, [core.int]),
    datePickerDayOfMonth: dart.fnType(core.String, [core.int]),
    datePickerHour: dart.fnType(core.String, [core.int]),
    datePickerHourSemanticsLabel: dart.fnType(core.String, [core.int]),
    datePickerMinute: dart.fnType(core.String, [core.int]),
    datePickerMinuteSemanticsLabel: dart.fnType(core.String, [core.int]),
    datePickerMediumDate: dart.fnType(core.String, [core.DateTime]),
    tabSemanticsLabel: dart.fnType(core.String, [], {}, {tabCount: core.int, tabIndex: core.int}),
    timerPickerHour: dart.fnType(core.String, [core.int]),
    timerPickerMinute: dart.fnType(core.String, [core.int]),
    timerPickerSecond: dart.fnType(core.String, [core.int]),
    timerPickerHourLabel: dart.fnType(core.String, [core.int]),
    timerPickerMinuteLabel: dart.fnType(core.String, [core.int]),
    timerPickerSecondLabel: dart.fnType(core.String, [core.int])
  }));
  dart.setGetterSignature(localizations$.DefaultCupertinoLocalizations, () => ({
    __proto__: dart.getGetters(localizations$.DefaultCupertinoLocalizations.__proto__),
    datePickerDateOrder: localizations$.DatePickerDateOrder,
    datePickerDateTimeOrder: localizations$.DatePickerDateTimeOrder,
    anteMeridiemAbbreviation: core.String,
    postMeridiemAbbreviation: core.String,
    todayLabel: core.String,
    alertDialogLabel: core.String,
    timerPickerHourLabels: core.List$(core.String),
    timerPickerMinuteLabels: core.List$(core.String),
    timerPickerSecondLabels: core.List$(core.String),
    cutButtonLabel: core.String,
    copyButtonLabel: core.String,
    pasteButtonLabel: core.String,
    selectAllButtonLabel: core.String,
    searchTextFieldPlaceholderLabel: core.String,
    modalBarrierDismissLabel: core.String
  }));
  dart.setLibraryUri(localizations$.DefaultCupertinoLocalizations, I[1]);
  dart.defineLazy(localizations$.DefaultCupertinoLocalizations, {
    /*localizations$.DefaultCupertinoLocalizations._shortWeekdays*/get _shortWeekdays() {
      return C[14] || CT.C14;
    },
    /*localizations$.DefaultCupertinoLocalizations._shortMonths*/get _shortMonths() {
      return C[15] || CT.C15;
    },
    /*localizations$.DefaultCupertinoLocalizations._months*/get _months() {
      return C[16] || CT.C16;
    },
    /*localizations$.DefaultCupertinoLocalizations.delegate*/get delegate() {
      return C[17] || CT.C17;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/cupertino/debug.dart", {
    "package:flutter/src/cupertino/debug.dart": debug,
    "package:flutter/src/cupertino/localizations.dart": localizations$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["debug.dart","localizations.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2FAmBsD;AACpD,SAAO,AAsBN;AArBC,UAAkB,AAA4D,sEAAjC,OAAO;AAkBhD,QAjBF,WAAmB,sCAA2B;oDAC5C,gCAAa,qCACb,oCAAgB,SACX,AAAQ,AAAO,OAAR,yBAAoB,6CAC9B,uDAEF,oCAAgB,AACd,oEACA,+BAEF,6BAAS,AACP,yDACA,kEACA,wDACA;AAES,sBAAR,OAAO;;;;AAGd,YAAO;;AAET,UAAO;EACT;;;;;IChBA;;gEAjBK;;;;EAiBL;;;;;;;;;;;;;;;;;;IAoBA;;4DAjBK;;;;EAiBL;;;;;;;;;;;;;;;;cAoNgD;AAC5C,WAAO,0CAAoC,OAAO;AAClD,YAAgF,gBAA3D,sEAA2B,OAAO;IACzD;;;;EACF;;;;;gBAM0B;AAAW,YAAA,AAAO,AAAa,OAAd,kBAAiB;IAAI;SAGnB;AAAW,YAA8B,mDAAK,MAAM;IAAC;;wDAG9C;AAAQ;IAAK;;AAG1C;IAA+C;;;AAZ9D;;EAAiC;;;;;;;;;;;;mBAmEb;AAAc,YAAA,AAAU,UAAD;IAAW;oBAGjC;AAAe,YAAA,AAAO,6DAAC,AAAW,UAAD,GAAG;IAAE;yBAGjC;AAAa,YAAA,AAAS,SAAD;IAAW;mBAGtC;AAAS,YAAA,AAAK,KAAD;IAAW;iCAGV;AAAS,YAAA,AAAK,AAAW,KAAZ,gBAAc;IAAU;qBAGjD;AAAW,YAAA,AAAO,AAAW,OAAZ,wBAAoB,GAAG;IAAI;mCAG9B;AACxC,UAAI,AAAO,MAAD,KAAI,GACZ,MAAO;AACT,YAAO,AAAO,AAAW,OAAZ,gBAAc;IAC7B;yBAGqC;AACnC,YAAU,AAAc,oEAAC,AAAK,AAAQ,IAAT,gBAA4B,MACpD,AAAY,iEAAC,AAAK,AAAM,IAAP,cAA2B,MAC5C,AAAK,AAAI,AAAW,IAAhB,6BAAyB;IACpC;;AAG+C,YAAoB;IAAG;;AAGf,YAAwB;IAAmB;;AAG3D;IAAI;;AAGJ;IAAI;;AAGlB;IAAO;;AAGD;IAAO;;UAGC;UAAuB;AAC5D,YAAO,AAAS,QAAD,IAAI;AACnB,YAAO,AAAS,QAAD,IAAI;AACnB,YAAO,AAA4B,mBAAtB,QAAQ,sBAAK,QAAQ;IACpC;oBAG2B;AAAS,YAAA,AAAK,KAAD;IAAW;sBAGtB;AAAW,YAAA,AAAO,OAAD;IAAW;sBAG5B;AAAW,YAAA,AAAO,OAAD;IAAW;yBAGzB;AAAS,YAAA,AAAK,KAAD,KAAI,IAAI,SAAS;IAAO;;AAG3B;IAA+B;2BAGvC;AAAW;IAAM;;AAGP;IAAsB;2BAGhC;AAAW;IAAM;;AAGP;IAAsB;;AAGrC;IAAK;;AAGJ;IAAM;;AAGL;IAAO;;AAGH;IAAY;;AAGD;IAAQ;;AAGf;IAAS;gBAQE;AAChD,YAAO;IACT;;;;EA1JqC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAEX,2DAAc;;;MAUd,yDAAY;;;MAeZ,oDAAO;;;MAmI0B,qDAAQ","file":"../../../../../../../packages/flutter/src/cupertino/debug.dart.lib.js"}');
  // Exports:
  return {
    src__cupertino__debug: debug,
    src__cupertino__localizations: localizations$
  };
}));

//# sourceMappingURL=debug.dart.lib.js.map
